SQL Schema
In social network like Facebook or Twitter, people send friend requests and accept others’ requests as well. Now given two tables as below:

Table: friend_request
Create table If Not Exists friend_request ( sender_id INT NOT NULL, send_to_id INT NULL, request_date DATE NULL)
Truncate table friend_request
insert into friend_request (sender_id, send_to_id, request_date) values ('1', '2', '2016/06/01')
insert into friend_request (sender_id, send_to_id, request_date) values ('1', '3', '2016/06/01')
insert into friend_request (sender_id, send_to_id, request_date) values ('1', '4', '2016/06/01')
insert into friend_request (sender_id, send_to_id, request_date) values ('2', '3', '2016/06/02')
insert into friend_request (sender_id, send_to_id, request_date) values ('3', '4', '2016/06/09')
| sender_id | send_to_id |request_date|
|-----------|------------|------------|
| 1         | 2          | 2016_06-01 |
| 1         | 3          | 2016_06-01 |
| 1         | 4          | 2016_06-01 |
| 2         | 3          | 2016_06-02 |
| 3         | 4          | 2016-06-09 |

Table: request_accepted
Create table If Not Exists request_accepted ( requester_id INT NOT NULL, accepter_id INT NULL, accept_date DATE NULL)
Truncate table request_accepted
insert into request_accepted (requester_id, accepter_id, accept_date) values ('1', '2', '2016/06/03')
insert into request_accepted (requester_id, accepter_id, accept_date) values ('1', '3', '2016/06/08')
insert into request_accepted (requester_id, accepter_id, accept_date) values ('2', '3', '2016/06/08')
insert into request_accepted (requester_id, accepter_id, accept_date) values ('3', '4', '2016/06/09')
insert into request_accepted (requester_id, accepter_id, accept_date) values ('3', '4', '2016/06/10')
| requester_id | accepter_id |accept_date |
|--------------|-------------|------------|
| 1            | 2           | 2016_06-03 |
| 1            | 3           | 2016-06-08 |
| 2            | 3           | 2016-06-08 |
| 3            | 4           | 2016-06-09 |
| 3            | 4           | 2016-06-10 |

Write a query to find the overall acceptance rate of requests rounded to 2 decimals, which is the number of acceptance divide the number of requests. 

For the sample data above, your query should return the following result. 
|accept_rate|
|-----------|
|       0.80| 
Note: The accepted requests are not necessarily from the table friend_request. In this case, you just need to simply count the total accepted requests (no matter whether they are in the original requests), and divide it by the number of requests to get the acceptance rate.
- It is possible that a sender sends multiple requests to the same receiver, and a request could be accepted more than once. In this case, the ‘duplicated’ requests or acceptances are only counted once.
- If there is no requests at all, you should return 0.00 as the accept_rate.

Explanation: There are 4 unique accepted requests, and there are 5 requests in total. So the rate is 0.80. 

Follow-up:
Can you write a query to return the accept rate but for every month?
How about the cumulative accept rate for every day?


Solution:
/* MySQL query for MySQL: */
SELECT COALESCE(
    ROUND((SELECT COUNT(DISTINCT requester_id, accepter_id)
            FROM request_accepted) / (SELECT COUNT(DISTINCT sender_id, send_to_id)
                                        FROM friend_request), 2), 0) AS accept_rate;

/* T-SQL query for MS SQL Server: */
SELECT ROUND(ISNULL((SELECT CAST(COUNT(*) AS FLOAT)
                        FROM (SELECT DISTINCT requester_id, accepter_id
                                FROM request_accepted) AS accepted) /
                    NULLIF((SELECT COUNT(*)
                            FROM (SELECT DISTINCT sender_id, send_to_id
                                    FROM friend_request) AS requested), 0), 0), 2) AS accept_rate;

/* PL/SQL query for Oracle: */
WITH accepts AS (
    SELECT COUNT(*) AS accepted
    FROM (SELECT DISTINCT requester_id, accepter_id
            FROM request_accepted)),
    requests AS (
        SELECT COUNT(*) AS requested
        FROM (SELECT DISTINCT sender_id, send_to_id
              FROM friend_request))
SELECT CASE
        WHEN requested = 0 THEN 0
        ELSE ROUND(accepted/requested, 2)
        END AS accept_rate
FROM accepts, requests;
