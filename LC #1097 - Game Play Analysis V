SQL Schema
Table: Activity
+--------------+---------+
| Column Name  | Type    |
+--------------+---------+
| player_id    | int     |
| device_id    | int     |
| event_date   | date    |
| games_played | int     |
+--------------+---------+
(player_id, event_date) is the primary key of this table.
This table shows the activity of players of some game.
Each row is a record of a player who logged in and played a number of games (possibly 0) before logging out on some day using some device.

We define the install date of a player to be the first login day of that player.

We also define day 1 retention of some date X to be the number of players whose install date is X and they logged back in on the day right after X, divided by the number of players whose install date is X, rounded to 2 decimal places.

Write an SQL query that reports for each install date, the number of players that installed the game on that day and the day 1 retention.
The query result format is in the following example:
Activity table:
Create table If Not Exists Activity (player_id int, device_id int, event_date date, games_played int)
Truncate table Activity
insert into Activity (player_id, device_id, event_date, games_played) values ('1', '2', '2016-03-01', '5')
insert into Activity (player_id, device_id, event_date, games_played) values ('1', '2', '2016-03-02', '6')
insert into Activity (player_id, device_id, event_date, games_played) values ('2', '3', '2017-06-25', '1')
insert into Activity (player_id, device_id, event_date, games_played) values ('3', '1', '2016-03-01', '0')
insert into Activity (player_id, device_id, event_date, games_played) values ('3', '4', '2018-07-03', '5')
+-----------+-----------+------------+--------------+
| player_id | device_id | event_date | games_played |
+-----------+-----------+------------+--------------+
| 1         | 2         | 2016-03-01 | 5            |
| 1         | 2         | 2016-03-02 | 6            |
| 2         | 3         | 2017-06-25 | 1            |
| 3         | 1         | 2016-03-01 | 0            |
| 3         | 4         | 2016-07-03 | 5            |
+-----------+-----------+------------+--------------+

Result table:
+------------+----------+----------------+
| install_dt | installs | Day1_retention |
+------------+----------+----------------+
| 2016-03-01 | 2        | 0.50           |
| 2017-06-25 | 1        | 0.00           |
+------------+----------+----------------+
Player 1 and 3 installed the game on 2016-03-01 but only player 1 logged back in on 2016-03-02 so the day 1 retention of 2016-03-01 is 1 / 2 = 0.50
Player 2 installed the game on 2017-06-25 but didn't log back in on 2017-06-26 so the day 1 retention of 2017-06-25 is 0 / 1 = 0.00


Solution:
/* MySQL query for MySQL: */
SELECT sub.install_dt, COUNT(DISTINCT sub.player_id) AS installs, ROUND(COUNT(DISTINCT a.player_id)/COUNT(sub.player_id), 2) AS Day1_retention
FROM (SELECT player_id, MIN(event_date) AS install_dt
        FROM Activity
        GROUP BY player_id) sub
LEFT JOIN Activity a
    ON sub.player_id = a.player_id AND a.event_date = sub.install_dt + INTERVAL 1 DAY
GROUP BY sub.install_dt;

/* T-SQL query for MS SQL Server: */
SELECT sub.install_dt, 
        COUNT(DISTINCT sub.player_id) as installs,
        ROUND(CAST(SUM(CASE WHEN a.event_date IS NOT NULL THEN 1 ELSE 0 END) AS FLOAT)/COUNT(sub.player_id), 2) AS Day1_retention
FROM (SELECT player_id, MIN(event_date) AS install_dt
        FROM Activity
        GROUP BY player_id) sub
LEFT JOIN Activity a
    ON sub.player_id = a.player_id AND a.event_date = DATEADD(day, 1, sub.install_dt)
GROUP BY sub.install_dt;

/* PL/SQL query for Oracle: */
SELECT TO_CHAR(event_date, 'YYYY-MM-DD') AS install_dt,
        COUNT(player_id) AS installs,
        ROUND(COUNT(CASE WHEN t.date_diff = -1 THEN t.player_id END)/COUNT(t.player_id), 2) AS Day1_retention
FROM (SELECT player_id, event_date, event_date - LEAD(event_date) OVER (PARTITION BY player_id ORDER BY event_date) AS date_diff, RANK() OVER (PARTITION BY player_id ORDER BY event_date) AS rnk
        FROM Activity) t
WHERE t.rnk = 1
GROUP BY event_date;

Another PL/SQL query for Oracle is:
SELECT TO_CHAR(sub.install_dt, 'YYYY-MM-DD') AS install_dt, COUNT(DISTINCT sub.player_id) AS installs, ROUND(COUNT(DISTINCT a.player_id)/COUNT(sub.player_id), 2) AS Day1_retention
FROM (SELECT player_id, MIN(event_date) AS install_dt
        FROM Activity
        GROUP BY player_id) sub
LEFT JOIN Activity a
    ON sub.player_id = a.player_id AND a.event_date = sub.install_dt + INTERVAL '1' DAY
GROUP BY sub.install_dt;
