SQL Schema
Given two tables as below, write a query to display the comparison result (higher/lower/same) of the average salary of employees in a department to the company's average salary.

Table: salary
Create table If Not Exists salary (id int, employee_id int, amount int, pay_date date)
Truncate table salary
insert into salary (id, employee_id, amount, pay_date) values ('1', '1', '9000', '2017/03/31')
insert into salary (id, employee_id, amount, pay_date) values ('2', '2', '6000', '2017/03/31')
insert into salary (id, employee_id, amount, pay_date) values ('3', '3', '10000', '2017/03/31')
insert into salary (id, employee_id, amount, pay_date) values ('4', '1', '7000', '2017/02/28')
insert into salary (id, employee_id, amount, pay_date) values ('5', '2', '6000', '2017/02/28')
insert into salary (id, employee_id, amount, pay_date) values ('6', '3', '8000', '2017/02/28')
| id | employee_id | amount | pay_date   |
|----|-------------|--------|------------|
| 1  | 1           | 9000   | 2017-03-31 |
| 2  | 2           | 6000   | 2017-03-31 |
| 3  | 3           | 10000  | 2017-03-31 |
| 4  | 1           | 7000   | 2017-02-28 |
| 5  | 2           | 6000   | 2017-02-28 |
| 6  | 3           | 8000   | 2017-02-28 |
 

The employee_id column refers to the employee_id in the following table employee.
Create table If Not Exists employee (employee_id int, department_id int)
Truncate table employee
insert into employee (employee_id, department_id) values ('1', '1')
insert into employee (employee_id, department_id) values ('2', '2')
insert into employee (employee_id, department_id) values ('3', '2')
| employee_id | department_id |
|-------------|---------------|
| 1           | 1             |
| 2           | 2             |
| 3           | 2             |

So for the sample data above, the result is:
| pay_month | department_id | comparison  |
|-----------|---------------|-------------|
| 2017-03   | 1             | higher      |
| 2017-03   | 2             | lower       |
| 2017-02   | 1             | same        |
| 2017-02   | 2             | same        |
 

Explanation:
In March, the company's average salary is (9000+6000+10000)/3 = 8333.33...

The average salary for department '1' is 9000, which is the salary of employee_id '1' since there is only one employee in this department. So the comparison result is 'higher' since 9000 > 8333.33 obviously.

The average salary of department '2' is (6000 + 10000)/2 = 8000, which is the average of employee_id '2' and '3'. So the comparison result is 'lower' since 8000 < 8333.33.

With the same formula for the average salary comparison in February, the result is 'same' since both the department '1' and '2' have the same average salary with the company, which is 7000.


Solution:
/* MySQL query for MySQL: */
SELECT DISTINCT sub.pay_month, 
    sub.department_id, 
    CASE
        WHEN sub.deptAvgSal > sub.compAvgSal THEN 'higher'
        WHEN sub.deptAvgSal < sub.compAvgSal THEN 'lower'
        ELSE 'same'
    END AS comparison
FROM (SELECT LEFT(s.pay_date, 7) AS pay_month, 
            e.department_id, 
            AVG(s.amount) OVER (PARTITION BY e.department_id, LEFT(s.pay_date, 7)) AS deptAvgSal, 
            AVG(s.amount) OVER (PARTITION BY LEFT(s.pay_date, 7)) AS compAvgSal
        FROM salary s
        JOIN employee e
            ON s.employee_id = e.employee_id) sub
ORDER BY sub.pay_month DESC;

/* T-SQL query for MS SQL Server: */
WITH CompanyAvg AS (
    SELECT LEFT(pay_date, 7) AS pay_month, 
    AVG(amount) AS compAvgSal
    FROM Salary
    GROUP BY LEFT(pay_date, 7)
),
DepartmentAvg AS (
    SELECT LEFT(pay_date, 7) AS pay_month, 
        e.department_id, 
        AVG(s.amount) AS deptAvgSal
    FROM employee e
    INNER JOIN salary s
        ON e.employee_id = s.employee_id
    GROUP BY LEFT(pay_date, 7), e.department_id 
)
SELECT d.pay_month,
    d.department_id,
    CASE
        WHEN d.deptAvgSal > c.compAvgSal THEN 'higher'
        WHEN d.deptAvgSal < c.compAvgSal THEN 'lower'
        ELSE 'same'
    END AS comparison 
FROM DepartmentAvg d
INNER JOIN CompanyAvg c
    ON d.pay_month = c.pay_month;
    
/* PL/SQL query for Oracle: */
SELECT DISTINCT sub.pay_month, 
    sub.department_id, 
    CASE
        WHEN sub.deptAvgSal > sub.compAvgSal THEN 'higher'
        WHEN sub.deptAvgSal < sub.compAvgSal THEN 'lower'
        ELSE 'same'
    END AS comparison
FROM (SELECT TO_CHAR(s.pay_date, 'YYYY-MM') AS pay_month, 
            e.department_id, 
            AVG(s.amount) OVER (PARTITION BY e.department_id, TO_CHAR(s.pay_date, 'YYYY-MM')) AS deptAvgSal, 
            AVG(s.amount) OVER (PARTITION BY TO_CHAR(s.pay_date, 'YYYY-MM')) AS compAvgSal
        FROM salary s
        JOIN employee e
            ON s.employee_id = e.employee_id) sub
ORDER BY sub.pay_month DESC;
