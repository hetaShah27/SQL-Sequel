SQL Schema
A U.S graduate school has students from Asia, Europe and America. The students' location information are stored in table student as below.
Create table If Not Exists student (name varchar(50), continent varchar(7))
Truncate table student
insert into student (name, continent) values ('Jane', 'America')
insert into student (name, continent) values ('Pascal', 'Europe')
insert into student (name, continent) values ('Xi', 'Asia')
insert into student (name, continent) values ('Jack', 'America')
| name   | continent |
|--------|-----------|
| Jack   | America   |
| Pascal | Europe    |
| Xi     | Asia      |
| Jane   | America   |
 
Pivot the continent column in this table so that each name is sorted alphabetically and displayed underneath its corresponding continent. The output headers should be America, Asia and Europe respectively. It is guaranteed that the student number from America is no less than either Asia or Europe.

For the sample input, the output is: 
| America | Asia | Europe |
|---------|------|--------|
| Jack    | Xi   | Pascal |
| Jane    |      |        |

Follow-up: If it is unknown which continent has the most students, can you write a query to generate the student report?


Solution:
/* MySQL query for MySQL, T-SQL query for MS SQL Server: */
WITH sub AS (SELECT 
                CASE WHEN continent='America' THEN name ELSE NULL END AS 'America',
                CASE WHEN continent='Asia' THEN name ELSE NULL END AS 'Asia',
                CASE WHEN continent='Europe' THEN name ELSE NULL END AS 'Europe',
                ROW_NUMBER() OVER (PARTITION BY continent ORDER BY name) AS row_num
            FROM student
)
SELECT MAX(America) AS America, MAX(Asia) AS Asia, MAX(Europe) AS Europe
FROM sub
GROUP BY row_num
ORDER BY America, Asia, Europe;

/* PL/SQL query for Oracle: */
SELECT America AS "America", 
        Asia AS "Asia", 
        Europe AS "Europe"
FROM (SELECT name, continent, ROW_NUMBER() OVER (PARTITION BY continent ORDER BY name) AS row_num
        FROM student)
PIVOT(MIN(name) FOR continent IN ('America' America, 'Asia' Asia, 'Europe' Europe))
ORDER BY America, Asia, Europe;

/* Another solution that works well for MySQL, MS SQL Server and Oracle DBMS (not optimized): */
SELECT MAX(CASE WHEN continent = 'America' THEN name ELSE NULL END) AS America, 
        MAX(CASE WHEN continent = 'Asia' THEN name ELSE NULL END) AS Asia,
        MAX(CASE WHEN continent = 'Europe' THEN name ELSE NULL END) AS Europe
FROM (SELECT name, continent, ROW_NUMBER() OVER (PARTITION BY continent ORDER BY name) AS row_num
        FROM student) sub
GROUP BY row_num
ORDER BY row_num;
